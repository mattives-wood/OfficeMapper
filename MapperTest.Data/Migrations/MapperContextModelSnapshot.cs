// <auto-generated />
using GeoAPI.Geometries;
using MapperTest.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;

namespace MapperTest.Data.Migrations
{
    [DbContext(typeof(MapperContext))]
    partial class MapperContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MapperTest.Domain.Fixture", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<IPoint>("Coords")
                        .IsRequired()
                        .HasColumnType("geometry");

                    b.Property<long>("FixtureTypeID");

                    b.Property<long>("MapId");

                    b.HasKey("Id");

                    b.HasIndex("FixtureTypeID");

                    b.HasIndex("MapId");

                    b.ToTable("Fixtures");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Coords = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("POINT (-316 2285)"),
                            FixtureTypeID = 1L,
                            MapId = 1L
                        });
                });

            modelBuilder.Entity("MapperTest.Domain.FixtureType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("FixtureTypes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Description = "Fire Extinguisher"
                        });
                });

            modelBuilder.Entity("MapperTest.Domain.Map", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Building")
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Floor")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("Maps");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Building = "Courthouse",
                            Description = "IT Deptartment",
                            Floor = "2"
                        });
                });

            modelBuilder.Entity("MapperTest.Domain.Person", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Point>("Coords")
                        .IsRequired()
                        .HasColumnType("geometry");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<long>("MapId");

                    b.HasKey("Id");

                    b.HasIndex("MapId");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("MapperTest.Domain.Fixture", b =>
                {
                    b.HasOne("MapperTest.Domain.FixtureType", "FixtureType")
                        .WithMany("Fixtures")
                        .HasForeignKey("FixtureTypeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MapperTest.Domain.Map", "Map")
                        .WithMany("Fixtures")
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MapperTest.Domain.Person", b =>
                {
                    b.HasOne("MapperTest.Domain.Map", "Map")
                        .WithMany("Persons")
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
